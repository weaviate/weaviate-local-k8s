name: Weaviate Local Kubernetes Action

on:
  pull_request:
    types: [opened, synchronize]

jobs:
    get-latest-weaviate-version:
      runs-on: ubuntu-latest
      name: Get latest Weaviate version
      outputs:
        LATEST_WEAVIATE_VERSION: ${{ steps.latest-version.outputs.latest_weaviate_version }}
      steps:
        - name: Retrieve latest Weaviate version
          id: latest-version
          uses: weaviate/github-common-actions/.github/actions/get-latest-weaviate-version@main
    run-weaviate-local-k8s-basic:
      needs: get-latest-weaviate-version
      runs-on: ubuntu-latest
      name: Invoke weaviate-local-k8s action with basic parameters
      env:
        WORKERS: '3'
        REPLICAS: '5'
        WEAVIATE_VERSION: ${{ needs.get-latest-weaviate-version.outputs.LATEST_WEAVIATE_VERSION }}
        WEAVIATE_PORT: '8080'
        WEAVIATE_GRPC_PORT: '50051'
        EXPOSE_PODS: 'false'
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
        - name: Deploy weaviate-local-k8s from current branch.
          id: invoke-local-k8s
          uses: ./
          with:
            workers: ${{ env.WORKERS }}
            replicas: ${{ env.REPLICAS }}
            weaviate-version: ${{ env.WEAVIATE_VERSION }}
            expose-pods: ${{ env.EXPOSE_PODS }}
        - name: Check the configured values
          run: |
            set -ex
            replicas=$(kubectl get sts weaviate -n weaviate -o=jsonpath="{.spec.replicas}")
            if [[ "$replicas" -ne ${{ env.REPLICAS }} ]]; then
                echo "Error: Replicas count is not equal to ${{ env.REPLICAS }}. Found $replicas"
                exit 1
            fi
            workers=$(kubectl get nodes --selector=node-role.kubernetes.io/control-plane!= --no-headers | wc -l)
            if [[ "$workers" -ne ${{ env.WORKERS }} ]]; then
                echo "Error: Workers count is not equal to ${{ env.WORKERS }}. Found $workers"
                exit 1
            fi
            versions=$(curl -s http://127.0.0.1:8080/v1/nodes | jq '.nodes[] | .version' | tr -d '"')
            for version in `echo $versions | tr '\n' ' '`; do
                if [[ "$version" != "${{ env.WEAVIATE_VERSION }}" ]]; then
                    echo "Error: Version is not equal to ${{ env.WEAVIATE_VERSION }}. Found $version"
                    exit 1
                fi
            done
            error=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:2112/metrics)
            if [[ "$error" -ne 200 ]]; then
              echo "Error: Weaviate metrics is not listening, returned $error"
              exit 1
            fi
            #Verify that pods are not exposed
            for i in $(seq 0 $((REPLICAS-1))); do
              PORT=$((${{ env.WEAVIATE_PORT }} + i + 1))
              GRPC_PORT=$((${{ env.WEAVIATE_GRPC_PORT }} + i + 1))
              HTTP_PROCESS=$(lsof -i :$PORT -sTCP:LISTEN -n -P | grep kubectl-r) || true
              GRPC_PROCESS=$(lsof -i :$GRPC_PORT -sTCP:LISTEN -n -P | grep kubectl-r) || true
            done
    run-weaviate-local-k8s-all-params:
      needs: get-latest-weaviate-version
      runs-on: ubuntu-latest
      name: Invoke weaviate-local-k8s action passing all parameters
      env:
        WORKERS: '3'
        REPLICAS: '6'
        WEAVIATE_VERSION: ${{ needs.get-latest-weaviate-version.outputs.LATEST_WEAVIATE_VERSION }}
        WEAVIATE_PORT: '8081'
        WEAVIATE_GRPC_PORT: '50052'
        HELM_BRANCH: 'master'
        S3_OFFLOAD: 'true'
        MODULES: 'text2vec-contextionary'
        ENABLE_BACKUP: 'true'
        RBAC: 'true'
        AUTH_CONFIG: '/tmp/rbac-config.yaml' 
        EXPOSE_PODS: 'true'
        VALUES_OVERRIDE: |
          storage:
            size: 50Gi
          env:
            ASYNC_INDEXING: true
            LOG_LEVEL: debug
        VALUES_INLINE: '--set env.PERSISTENCE_LSM_ACCESS_STRATEGY=pread'
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
        # Creates the rbac-config.yaml in /tmp because otherwise the action
        # will override the file in the repository root, as there is another checkout within
        # the composite action.
        - name: Create RBAC config file
          run: |
            cat > /tmp/rbac-config.yaml << 'EOF'
            authentication:
              anonymous_access:
                enabled: false
              apikey:
                enabled: true
                allowed_keys:
                  - admin-key
                  - reader-key
                users:
                  - admin
                  - reader
              oidc:
                enabled: false
            authorization:
              rbac:
                enabled: true
                admins:
                  - admin
                viewers:
                  - reader
              admin_list:
                enabled: false
            EOF
        - name: Deploy weaviate-local-k8s from current branch.
          id: invoke-local-k8s
          uses: ./
          with:
            workers: ${{ env.WORKERS }}
            replicas: ${{ env.REPLICAS }}
            weaviate-version: ${{ env.WEAVIATE_VERSION }}
            weaviate-port: ${{ env.WEAVIATE_PORT }}
            weaviate-grpc-port: ${{ env.WEAVIATE_GRPC_PORT }}
            helm-branch: ${{ env.HELM_BRANCH }}
            values-override: ${{ env.VALUES_OVERRIDE }}
            s3-offload: ${{ env.S3_OFFLOAD }}
            modules: ${{ env.MODULES }}
            enable-backup: ${{ env.ENABLE_BACKUP }}
            values-inline: ${{ env.VALUES_INLINE }}
            observability: 'true'
            rbac: ${{ env.RBAC }}
            auth-config: ${{ env.AUTH_CONFIG }}
            debug: 'true'
            expose-pods: ${{ env.EXPOSE_PODS }}
        - name: Check the configured values
          run: |
              set -ex
              replicas=$(kubectl get sts weaviate -n weaviate -o=jsonpath="{.spec.replicas}")
              if [[ "$replicas" -ne ${{ env.REPLICAS }} ]]; then
                  echo "Error: Replicas count is not equal to ${{ env.REPLICAS }}. Found $replicas"
                  exit 1
              fi
              workers=$(kubectl get nodes --selector=node-role.kubernetes.io/control-plane!= --no-headers | wc -l)
              if [[ "$workers" -ne ${{ env.WORKERS }} ]]; then
                  echo "Error: Workers count is not equal to ${{ env.WORKERS }}. Found $workers"
                  exit 1
              fi
              versions=$(curl -H "Authorization: Bearer admin-key" -s http://127.0.0.1:${{ env.WEAVIATE_PORT }}/v1/nodes | jq '.nodes[] | .version' | tr -d '"')
              for version in `echo $versions | tr '\n' ' '`; do
                  if [[ "$version" != "${{ env.WEAVIATE_VERSION }}" ]]; then
                      echo "Error: Version is not equal to 1.25.0. Found $version"
                      exit 1
                  fi
              done
              error=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:9091/metrics)
              if [[ "$error" -ne 200 ]]; then
                echo "Error: Prometheus is not listening, returned $error"
                exit 1
              fi
              error=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/)
              if [[ "$error" -ne 200 ]]; then
                echo "Error: Grafana is not listening, returned $error"
                exit 1
              fi
              error=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:2112/metrics)
              if [[ "$error" -ne 200 ]]; then
                echo "Error: Weaviate metrics is not listening, returned $error"
                exit 1
              fi
              env_value=$(kubectl get sts weaviate -n weaviate -o=jsonpath='{.spec.template.spec.containers[0].env[?(@.name=="ASYNC_INDEXING")].value}')
              if [[ "$env_value" != "true" ]]; then
                  echo "Error: env.ASYNC_INDEXING is not equal to true. Found $env_value"
                  exit 1
              fi
              env_value=$(kubectl get sts weaviate -n weaviate -o=jsonpath='{.spec.template.spec.containers[0].env[?(@.name=="LOG_LEVEL")].value}')
              if [[ "$env_value" != "debug" ]]; then
                  echo "Error: env.LOG_LEVEL is not equal to debug. Found $env_value"
                  exit 1
              fi
              env_value=$(kubectl get sts weaviate -n weaviate -o=jsonpath='{.spec.template.spec.containers[0].env[?(@.name=="PERSISTENCE_LSM_ACCESS_STRATEGY")].value}')
              if [[ "$env_value" != "pread" ]]; then
                  echo "Error: env.PERSISTENCE_LSM_ACCESS_STRATEGY is not equal to pread. Found $env_value"
                  exit 1
              fi
              for ((i=0; i<${{ env.REPLICAS }}; i++)); do
                PORT=$((${{ env.WEAVIATE_PORT }} + i + 1))
                GRPC_PORT=$((${{ env.WEAVIATE_GRPC_PORT }} + i + 1))
                
                HTTP_PROCESS=$(lsof -i :$PORT -sTCP:LISTEN -n -P | grep kubectl-r) || true
                GRPC_PROCESS=$(lsof -i :$GRPC_PORT -sTCP:LISTEN -n -P | grep kubectl-r) || true

                if [ -z "$HTTP_PROCESS" ]; then
                  echo "FAIL: Pod $i (HTTP Port $PORT): NOT LISTENING"
                  exit 1
                else
                  echo "Pod $i (HTTP Port $PORT): LISTENING"
                fi

                if [ -z "$GRPC_PROCESS" ]; then
                  echo "FAIL: Pod $i (gRPC Port $GRPC_PORT): NOT LISTENING"
                  exit 1
                else
                  echo "Pod $i (gRPC Port $GRPC_PORT): LISTENING"
                fi
              done
    run-weaviate-local-k8s-which-fails:
      runs-on: ubuntu-latest
      name: Create a single-node Weaviate cluster with non existing image.
      env:
          WORKERS: '1'
          REPLICAS: '1'
          WEAVIATE_VERSION: 'idontexist_youdidntseeme'
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
        - name: Deploy weaviate-local-k8s from current branch.
          id: invoke-local-k8s
          uses: ./
          with:
              workers: ${{ env.WORKERS }}
              replicas: ${{ env.REPLICAS }}
              weaviate-version: ${{ env.WEAVIATE_VERSION }}
              expose-pods: 'false'
          continue-on-error: true
        - name: Check that deployment failed
          if: steps.invoke-local-k8s.outcome == 'success'
          run: |
            echo "The previous step should have failed, but it didn't"
            exit 1
        - name: Check that the deployment failed
          run: |
              set -ex
              availableReplicas=$(kubectl get sts weaviate -n weaviate -o=jsonpath='{.status.availableReplicas}')
              if [[ "$replicas" -ne "0" ]]; then
                  echo "Error: Replicas count should be 0. Found $replicas"
                  exit 1
              fi
    run-weaviate-local-k8s-with-module:
      needs: get-latest-weaviate-version
      runs-on: ubuntu-latest
      name: Invoke weaviate-local-k8s action with text2vec-contextionary module
      env:
        WORKERS: '2'
        REPLICAS: '3'
        WEAVIATE_VERSION: ${{ needs.get-latest-weaviate-version.outputs.LATEST_WEAVIATE_VERSION }}
        MODULES: 'text2vec-contextionary'
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
        - name: Deploy weaviate-local-k8s from current branch.
          id: invoke-local-k8s
          uses: ./
          with:
              workers: ${{ env.WORKERS }}
              replicas: ${{ env.REPLICAS }}
              weaviate-version: ${{ env.WEAVIATE_VERSION }}
              modules: ${{ env.MODULES }}
              expose-pods: 'false'
        - name: Check the configured values
          run: |
              set -ex
              replicas=$(kubectl get sts weaviate -n weaviate -o=jsonpath="{.status.availableReplicas}")
              if [[ "$replicas" -ne ${{ env.REPLICAS }} ]]; then
                  echo "Error: Replicas count is not equal to ${{ env.REPLICAS }}. Found $replicas"
                  exit 1
              fi
              workers=$(kubectl get nodes --selector=node-role.kubernetes.io/control-plane!= --no-headers | wc -l)
              if [[ "$workers" -ne ${{ env.WORKERS }} ]]; then
                  echo "Error: Workers count is not equal to ${{ env.WORKERS }}. Found $workers"
                  exit 1
              fi
              versions=$(curl -s http://127.0.0.1:8080}/v1/nodes | jq '.nodes[] | .version' | tr -d '"')
              for version in `echo $versions | tr '\n' ' '`; do
                  if [[ "$version" != "${{ env.WEAVIATE_VERSION }}"  ]]; then
                      echo "Error: Version is not equal to ${{ env.WEAVIATE_VERSION }}. Found $version"
                      exit 1
                  fi
              done
              contextionary=$(kubectl get deployment contextionary -n weaviate -o=jsonpath="{.status.availableReplicas}")
              if [[ "$contextionary" -ne "1" ]]; then
                  echo "Error: Contextionary replicas count is not equal to 1. Found $contextionary"
                  exit 1
              fi
              error=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:2112/metrics)
              if [[ "$error" -ne 200 ]]; then
                echo "Error: Weaviate metrics is not listening, returned $error"
                exit 1
              fi
    run-weaviate-local-k8s-raft-upgrade:
      runs-on: ubuntu-latest
      name: Invoke weaviate-local-k8s upgrade to RAFT with basic parameters
      env:
        WORKERS: '3'
        REPLICAS: '5'
        WEAVIATE_VERSION: '1.24.9'
        UPGRADE_VERSION: '1.25.0'
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
        - name: Deploy weaviate-local-k8s from current branch.
          id: invoke-local-k8s
          uses: ./
          with:
            workers: ${{ env.WORKERS }}
            replicas: ${{ env.REPLICAS }}
            weaviate-version: ${{ env.WEAVIATE_VERSION }}
            helm-branch: 'v16.8.8'
            expose-pods: 'false'
        - name: Upgrade weaviate-local-k8s to RAFT from current branch.
          uses: ./
          with:
            operation: upgrade
            workers: ${{ env.WORKERS }}
            replicas: ${{ env.REPLICAS }}
            delete-sts: 'true'
            weaviate-version: ${{ env.UPGRADE_VERSION }}
            expose-pods: 'false'
        - name: Check the configured values
          run: |
            set -ex
            replicas=$(kubectl get sts weaviate -n weaviate -o=jsonpath="{.spec.replicas}")
            if [[ "$replicas" -ne ${{ env.REPLICAS }} ]]; then
                echo "Error: Replicas count is not equal to ${{ env.REPLICAS }}. Found $replicas"
                exit 1
            fi
            workers=$(kubectl get nodes --selector=node-role.kubernetes.io/control-plane!= --no-headers | wc -l)
            if [[ "$workers" -ne ${{ env.WORKERS }} ]]; then
                echo "Error: Workers count is not equal to ${{ env.WORKERS }}. Found $workers"
                exit 1
            fi
            versions=$(curl -s http://127.0.0.1:8080/v1/nodes | jq '.nodes[] | .version' | tr -d '"')
            for version in `echo $versions | tr '\n' ' '`; do
                if [[ "$version" != "${{ env.UPGRADE_VERSION }}" ]]; then
                    echo "Error: Version is not equal to ${{ env.UPGRADE_VERSION }}. Found $version"
                    exit 1
                fi
            done
            error=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:2112/metrics)
            if [[ "$error" -ne 200 ]]; then
              echo "Error: Weaviate metrics is not listening, returned $error"
              exit 1
            fi
    run-weaviate-local-k8s-raft-downgrade:
      runs-on: ubuntu-latest
      name: Invoke weaviate-local-k8s downgrade from RAFT to pre-RAFT with basic parameters
      env:
        WORKERS: '3'
        REPLICAS: '5'
        WEAVIATE_VERSION: '1.25.0'
        DOWNGRADE_VERSION: '1.24.9'
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
        - name: Deploy weaviate-local-k8s from current branch.
          id: invoke-local-k8s
          uses: ./
          with:
            workers: ${{ env.WORKERS }}
            replicas: ${{ env.REPLICAS }}
            weaviate-version: ${{ env.WEAVIATE_VERSION }}
            helm-branch: 'v17.0.0'
            expose-pods: 'false'
        - name: Downgrade weaviate-local-k8s from RAFT to pre-RAFT from current branch.
          uses: ./
          with:
            operation: upgrade
            workers: ${{ env.WORKERS }}
            replicas: ${{ env.REPLICAS }}
            delete-sts: 'true'
            helm-branch: 'v16.8.8'
            weaviate-version: ${{ env.DOWNGRADE_VERSION }}
            expose-pods: 'false'
        - name: Check the configured values
          run: |
            replicas=$(kubectl get sts weaviate -n weaviate -o=jsonpath="{.spec.replicas}")
            if [[ "$replicas" -ne ${{ env.REPLICAS }} ]]; then
                echo "Error: Replicas count is not equal to ${{ env.REPLICAS }}. Found $replicas"
                exit 1
            fi
            workers=$(kubectl get nodes --selector=node-role.kubernetes.io/control-plane!= --no-headers | wc -l)
            if [[ "$workers" -ne ${{ env.WORKERS }} ]]; then
                echo "Error: Workers count is not equal to ${{ env.WORKERS }}. Found $workers"
                exit 1
            fi
            versions=$(curl -s http://127.0.0.1:8080/v1/nodes | jq '.nodes[] | .version' | tr -d '"')
            for version in `echo $versions | tr '\n' ' '`; do
                if [[ "$version" != "${{ env.DOWNGRADE_VERSION }}" ]]; then
                    echo "Error: Version is not equal to ${{ env.DOWNGRADE_VERSION }}. Found $version"
                    exit 1
                fi
            done
            error=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:2112/metrics)
            if [[ "$error" -ne 200 ]]; then
              echo "Error: Weaviate metrics is not listening, returned $error"
              exit 1
            fi
    run-weaviate-local-k8s-upgrade-to-latest:
      needs: get-latest-weaviate-version
      runs-on: ubuntu-latest
      name: Invoke weaviate-local-k8s upgrade to latest version
      env:
        WORKERS: '3'
        REPLICAS: '3'
        WEAVIATE_VERSION: "1.26.0"
        UPGRADE_VERSION: ${{ needs.get-latest-weaviate-version.outputs.LATEST_WEAVIATE_VERSION }}
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
        - name: Deploy weaviate-local-k8s from current branch.
          id: invoke-local-k8s
          uses: ./
          with:
            workers: ${{ env.WORKERS }}
            replicas: ${{ env.REPLICAS }}
            weaviate-version: ${{ env.WEAVIATE_VERSION }}
            expose-pods: 'true'
        - name: Upgrade weaviate-local-k8s to latest version from current branch.
          uses: ./
          with:
            operation: upgrade
            workers: ${{ env.WORKERS }}
            replicas: ${{ env.REPLICAS }}
            weaviate-version: ${{ env.UPGRADE_VERSION }}
            expose-pods: 'true'
        - name: Check the configured values
          run: |
            replicas=$(kubectl get sts weaviate -n weaviate -o=jsonpath="{.spec.replicas}")
            if [[ "$replicas" -ne ${{ env.REPLICAS }} ]]; then
                echo "Error: Replicas count is not equal to ${{ env.REPLICAS }}. Found $replicas"
                exit 1
            fi
            workers=$(kubectl get nodes --selector=node-role.kubernetes.io/control-plane!= --no-headers | wc -l)
            if [[ "$workers" -ne ${{ env.WORKERS }} ]]; then
                echo "Error: Workers count is not equal to ${{ env.WORKERS }}. Found $workers"
                exit 1
            fi
            # Use exposed port for weaviate-1 (8082)
            versions=$(curl -s http://127.0.0.1:8082/v1/nodes | jq '.nodes[] | .version' | tr -d '"')
            for version in `echo $versions | tr '\n' ' '`; do
                if [[ "$version" != "${{ env.UPGRADE_VERSION }}" ]]; then
                    echo "Error: Version is not equal to ${{ env.UPGRADE_VERSION }}. Found $version"
                    exit 1
                fi
            done
            error=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:2112/metrics)
            if [[ "$error" -ne 200 ]]; then
              echo "Error: Weaviate metrics is not listening, returned $error"
              exit 1
            fi
    run-weaviate-local-k8s-backup:
      runs-on: ubuntu-latest
      name: Invoke weaviate-local-k8s action with support for backup
      env:
        WORKERS: '1'
        REPLICAS: '5'
        WEAVIATE_VERSION: '1.26.3'
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
        - name: Deploy weaviate-local-k8s from current branch.
          id: invoke-local-k8s
          uses: ./
          with:
            workers: ${{ env.WORKERS }}
            replicas: ${{ env.REPLICAS }}
            enable-backup: 'true'
            weaviate-version: ${{ env.WEAVIATE_VERSION }}
        - name: Check the configured values
          run: |
            set -ex
            replicas=$(kubectl get sts weaviate -n weaviate -o=jsonpath="{.spec.replicas}")
            if [[ "$replicas" -ne ${{ env.REPLICAS }} ]]; then
                echo "Error: Replicas count is not equal to ${{ env.REPLICAS }}. Found $replicas"
                exit 1
            fi
            workers=$(kubectl get nodes --selector=node-role.kubernetes.io/control-plane!= --no-headers | wc -l)
            if [[ "$workers" -ne ${{ env.WORKERS }} ]]; then
                echo "Error: Workers count is not equal to ${{ env.WORKERS }}. Found $workers"
                exit 1
            fi
            versions=$(curl -s http://127.0.0.1:8080/v1/nodes | jq '.nodes[] | .version' | tr -d '"')
            for version in `echo $versions | tr '\n' ' '`; do
                if [[ "$version" != "${{ env.WEAVIATE_VERSION }}" ]]; then
                    echo "Error: Version is not equal to ${{ env.WEAVIATE_VERSION }}. Found $version"
                    exit 1
                fi
            done
            error=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:2112/metrics)
            if [[ "$error" -ne 200 ]]; then
              echo "Error: Weaviate metrics is not listening, returned $error"
              exit 1
            fi
            echo "Create a collection"
            curl -X POST -H "Content-Type: application/json" \
              -d '{
                  "class": "Article"
                  }' \
              http://localhost:8080/v1/schema
            echo "Create a backup"
            curl -X POST -H "Content-Type: application/json" \
              -d '{
                  "id": "test-backup"
                  }' \
              http://localhost:8080/v1/backups/s3
            response=$(curl -s http://localhost:8080/v1/backups/s3/test-backup)
            if echo "$response" | jq -e '.status == "STARTED" or .status == "SUCCEEDED"' > /dev/null 2>&1; then
              echo "The backup has been started."
            else
              echo "The backup status is not STARTED/SUCCEEDED or the json output is not the expected."
              exit 1
            fi
    run-weaviate-local-k8s-rbac:
      runs-on: ubuntu-latest
      name: Invoke weaviate-local-k8s action with RBAC support (admin-key and admin-user)
      env:
        WORKERS: '1'
        REPLICAS: '3'
        WEAVIATE_VERSION: '1.28.2'
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
        - name: Deploy weaviate-local-k8s from current branch.
          id: invoke-local-k8s
          uses: ./
          with:
            workers: ${{ env.WORKERS }}
            replicas: ${{ env.REPLICAS }}
            weaviate-version: ${{ env.WEAVIATE_VERSION }}
            rbac: 'true'
        - name: Check the configured values
          run: |
            replicas=$(kubectl get sts weaviate -n weaviate -o=jsonpath="{.spec.replicas}")
            if [[ "$replicas" -ne ${{ env.REPLICAS }} ]]; then
                echo "Error: Replicas count is not equal to ${{ env.REPLICAS }}. Found $replicas"
                exit 1
            fi
            workers=$(kubectl get nodes --selector=node-role.kubernetes.io/control-plane!= --no-headers | wc -l)
            if [[ "$workers" -ne ${{ env.WORKERS }} ]]; then
                echo "Error: Workers count is not equal to ${{ env.WORKERS }}. Found $workers"
                exit 1
            fi
            versions=$(curl -H "Authorization: Bearer admin-key" -s  http://127.0.0.1:8080/v1/nodes | jq '.nodes[] | .version' | tr -d '"')
            for version in `echo $versions | tr '\n' ' '`; do
                if [[ "$version" != "1.28.2" ]]; then
                    echo "Error: Version is not equal to ${{ env.WEAVIATE_VERSION }}. Found $version"
                    exit 1
                fi
            done
            error=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:2112/metrics)
            if [[ "$error" -ne 200 ]]; then
              echo "Error: Weaviate metrics is not listening, returned $error"
              exit 1
            fi
    run-weaviate-local-k8s-expose-pods:
      needs: get-latest-weaviate-version
      runs-on: ubuntu-latest
      name: Test pod restart with exposed ports
      env:
        WORKERS: '1'
        REPLICAS: '3'
        WEAVIATE_VERSION: ${{ needs.get-latest-weaviate-version.outputs.LATEST_WEAVIATE_VERSION }}
        EXPOSE_PODS: 'true'
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
        - name: Deploy weaviate-local-k8s with exposed pods
          id: invoke-local-k8s
          uses: ./
          with:
            workers: ${{ env.WORKERS }}
            replicas: ${{ env.REPLICAS }}
            weaviate-version: ${{ env.WEAVIATE_VERSION }}
            expose-pods: ${{ env.EXPOSE_PODS }}
        - name: Verify initial port exposure
          run: |
            set -ex
            # Check all pods are listening with retries
            for i in {0..2}; do
              PORT=$((8080 + i + 1))
              GRPC_PORT=$((50051 + i + 1))
              METRICS_PORT=$((2112 + i + 1))
              PROFILER_PORT=$((6060 + i + 1))
              
              # Verify HTTP port with retries
              for retry in {1..30}; do
                if curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:$PORT/v1/nodes | grep -q 200; then
                  break
                fi
                echo "HTTP port $PORT not ready, retry $retry/30"
                sleep 2
                if [[ $retry -eq 30 ]]; then
                  echo "ERROR: HTTP port $PORT not ready after 30 retries"
                  exit 1
                fi
              done
              curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:$PORT/v1/nodes | grep -q 200 || {
                echo "ERROR: HTTP port $PORT final check failed"
                exit 1
              }
              
              # Verify gRPC port with retries and timeout
              for retry in {1..30}; do
                if nc -z -w 1 127.0.0.1 $GRPC_PORT; then
                  break
                fi
                echo "gRPC port $GRPC_PORT not ready, retry $retry/30"
                sleep 2
                if [[ $retry -eq 30 ]]; then
                  echo "ERROR: gRPC port $GRPC_PORT not ready after 30 retries"
                  exit 1
                fi
              done
              nc -z -w 5 127.0.0.1 $GRPC_PORT || {
                echo "ERROR: gRPC port $GRPC_PORT final check failed"
                exit 1
              }

              # Verify metrics port with retries
              for retry in {1..30}; do
                if curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:$METRICS_PORT/metrics | grep -q 200; then
                  break
                fi
                echo "Metrics port $METRICS_PORT not ready, retry $retry/30"
                sleep 2
                if [[ $retry -eq 30 ]]; then
                  echo "ERROR: Metrics port $METRICS_PORT not ready after 30 retries"
                  exit 1
                fi
              done
              curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:$METRICS_PORT/metrics | grep -q 200 || {
                echo "ERROR: Metrics port $METRICS_PORT final check failed"
                exit 1
              }

              # Verify profiler port with retries
              for retry in {1..30}; do
                if nc -z -w 1 127.0.0.1 $PROFILER_PORT; then
                  break
                fi
                echo "Profiler port $PROFILER_PORT not ready, retry $retry/30"
                sleep 2
                if [[ $retry -eq 30 ]]; then
                  echo "ERROR: Profiler port $PROFILER_PORT not ready after 30 retries"
                  exit 1
                fi
              done
              nc -z -w 5 127.0.0.1 $PROFILER_PORT || {
                echo "ERROR: Profiler port $PROFILER_PORT final check failed"
                exit 1
              }
            done
        - name: Restart pod and verify reconnection
          run: |
            set -ex
            # Force delete pod weaviate-2
            kubectl delete pod weaviate-2 -n weaviate --force --grace-period=0
            
            # Wait for pod to be recreated
            kubectl wait --for=condition=ready pod/weaviate-2 -n weaviate --timeout=3m
            
            echo "Wait for Weaviate to be ready"
            for timer in {1..120}; do
              if curl -sf -o /dev/null localhost:8080/v1/.well-known/ready; then
                echo "Weaviate is ready"
                break
              fi

              if [ "$timer" -eq 120 ]; then
                echo "ERROR: Weaviate is not ready after 120s"
                exit 1
              fi

              echo "Weaviate is not ready, trying again in 1s"
              sleep 1
            done
            
            # Verify specific port for weaviate-2 (8080 + 2 + 1 = 8083)
            echo "Checking restarted pod on port 8083"
            curl -s http://127.0.0.1:8083/v1/nodes | jq -e '.nodes | length == 3'

            # Verify gRPC port (simple connectivity check)
            nc -z 127.0.0.1 50054 || exit 1
            
            # Verify metrics endpoint on restarted pod
            curl -s -o /dev/null -w "%{http_code}" http://localhost:2112/metrics | grep 200
