name: Weaviate Local K8s Action
description: Deploy Weaviate to a local Kubernetes cluster

inputs:
  operation:
    description: 'The operation to perform. Supported: setup, upgrade, clean. Default: setup'
    required: false
    default: 'setup'
  weaviate-port:
    description: 'The port number for Weaviate'
    required: false
    default: '8080'    
  weaviate-grpc-port:
    description: 'The gRPC port number for Weaviate'
    required: false
    default: '50051'
  workers:
    description: 'The number of workers for Weaviate'
    required: false
    default: '3'
  replicas:
    description: 'The number of replicas for Weaviate'
    required: false
    default: '3'
  weaviate-version:
    description: 'The version of Weaviate to deploy'
    required: false
    default: 'latest'
  helm-branch:
    description: 'The branch of the Helm chart repository to use'
    required: false
    default: ''
  modules:
    description: 'Modules to load on Weaviate startup. Comma separated list of module names'
    required: false
    default: ''
  values-override:
    description: 'Override values for the Helm chart in YAML string'
    required: false
    default: ''
  values-inline:
    description: 'Override values for the Helm chart in inline form'
    required: false
    default: ''
  enable-backup:
    description: 'Configures S3 compatible backup for Weaviate'
    required: false
    default: 'false'
  s3-offload:
    description: 'Configures S3 tenant offloading'
    required: false
    default: 'false'
  delete-sts:
    description: 'Configure either Weaviate Statefulset should be removed'
    required: false
    default: 'false'
  observability:
    description: 'Enable observability stack'
    required: false
    default: 'false'
  expose-pods:
    description: 'Expose the weaviate-pods to be accessible in weaviate-port + i where i=1,2,3..replicas'
    required: false
    default: 'true'
  rbac:
    description: 'Enable RBAC. By default it will create an admin user with admin role and the API key be `admin-key`'
    required: false
    default: 'false'
  oidc:
    description: 'Enable OIDC authentication. By default it will only enable OIDC in the environment, no user will be created or configured unless passing AUTH_CONFIG or RBAC=true without AUTH_CONFIG.'
    required: false
    default: 'false'
  dynamic-users:
    description: 'Enable dynamic user management. Allows users to be created, deleted and updated dynamically from the database'
    required: false
    default: 'false'
  auth-config:
    description: 'File location containing the authentication and authorization configuration in YAML format'
    required: false
    default: ''
  debug:
    description: 'Run the action in debug mode (set -x)'
    required: false
    default: 'false'
  docker-config:
   description: 'File location containing the docker configuration that contains auth to be mounted in KInD.'
   required: false
   default: ''
runs:
  using: 'composite'
  steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
       clean: false # leave cache and docker config in place
    - name: Create values-override.yaml
      shell: bash
      if: ${{ inputs.values-override != '' }}
      run: |
        echo "${{ inputs.values-override }}" > ${{ github.action_path }}/values-override.yaml
    - name: Deploy local kubernetes cluster
      shell: bash
      env:
        OPERATION: ${{ inputs.operation }}
        DEBUG: ${{ inputs.debug }}
        WEAVIATE_PORT: ${{ inputs.weaviate-port }}
        WEAVIATE_GRPC_PORT: ${{ inputs.weaviate-grpc-port }}
        WORKERS: ${{ inputs.workers }}
        REPLICAS: ${{ inputs.replicas }}
        WEAVIATE_VERSION: ${{ inputs.weaviate-version }}
        MODULES: ${{ inputs.modules }}
        HELM_BRANCH: ${{ inputs.helm-branch }}
        ENABLE_BACKUP: ${{ inputs.enable-backup }}
        S3_OFFLOAD: ${{ inputs.s3-offload }}
        DELETE_STS: ${{ inputs.delete-sts }}
        VALUES_INLINE: ${{ inputs.values-inline }}
        OBSERVABILITY: ${{ inputs.observability }}
        RBAC: ${{ inputs.rbac }}
        OIDC: ${{ inputs.oidc }}
        DYNAMIC_USERS: ${{ inputs.dynamic-users }}
        AUTH_CONFIG: ${{ inputs.auth-config }}
        EXPOSE_PODS: ${{ inputs.expose-pods }}
        DOCKER_CONFIG: ${{ inputs.docker-config }}
      run: |
        # Retry configuration
        MAX_RETRIES=2
        RETRY_DELAY=30
        
        for attempt in $(seq 1 $MAX_RETRIES); do
          echo "Attempt $attempt of $MAX_RETRIES"
          
          if ${{ github.action_path }}/local-k8s.sh $OPERATION; then
            echo "Deployment successful on attempt $attempt"
            exit 0
          else
            echo "Deployment failed on attempt $attempt"
            
            if [ $attempt -lt $MAX_RETRIES ]; then
              echo "Waiting $RETRY_DELAY seconds before retry..."
              sleep $RETRY_DELAY
              
              # Clean up before retry for setup operations
              if [ "$OPERATION" = "setup" ]; then
                echo "Cleaning up before retry..."
                ${{ github.action_path }}/local-k8s.sh clean || true
              fi
            else
              echo "All $MAX_RETRIES attempts failed"
              exit 1
            fi
          fi
        done
    - name: Retrieve weaviate logs
      shell: bash
      if: failure()
      run: |
        echo "###### WEAVIATE LOGS ######"
        kubectl logs -n weaviate -l app.kubernetes.io/name=weaviate || true
        echo "###### WEAVIATE NODES ######"
        kubectl get nodes -n weaviate -o wide || true
        echo "###### WEAVIATE PODS ######"
        kubectl get pods -n weaviate -o wide || true
        echo "###### WEAVIATE EVENTS ######"
        kubectl get events -n weaviate || true
        echo "####### WEAVIATE STS CONFIG ######"
        kubectl get sts weaviate -n weaviate -o yaml || true
        echo "####### KUBECTL-RELAY PROCESSES ######"
        pgrep kubectl-relay || echo "No kubectl-relay processes found" || true
        
